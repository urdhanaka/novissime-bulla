Untuk setiap referensi, baris pertama (newton1687) merupakan label dan baris-baris berikutnya
merupakan atribut dari referensi yang akan digunakan. Umumnya, format referensi berikut sudah
disediakan oleh penyedia sumber referensi secara online dan bisa langsung ditaruh di sini.
Lihat https://www.bibtex.com/g/bibtex-format/ untuk informasi lebih lanjut mengenai format
BibTex yang digunakan pada file ini.

@article{newton1687,
  author = {Isaac Newton},
  journal = {Philosophiæ Naturalis Principia Mathematica},
  title = {Axioms or Laws of Motion},
  year = {1687},
}

@misc{roketluarangkasa,
  title = {Roket Luar Angkasa Discovery},
  year = 2021,
  url = {https://airandspace.si.edu/explore-and-learn/topics/discovery/about.cfm
         },
  urldate = {2021-02-03},
}

@inproceedings{borg-references,
  title = {Large-scale cluster management at {Google} with {Borg}},
  author = {Abhishek Verma and Luis Pedrosa and Madhukar R. Korupolu and David
            Oppenheimer and Eric Tune and John Wilkes},
  year = {2015},
  booktitle = {Proceedings of the European Conference on Computer Systems
               (EuroSys)},
  address = {Bordeaux, France},
}
  
@inproceedings{6830928,
  author = {AlJahdali, Hussain and Albatli, Abdulaziz and Garraghan, Peter and
            Townend, Paul and Lau, Lydia and Xu, Jie},
  booktitle = {2014 IEEE 8th International Symposium on Service Oriented System
               Engineering},
  title = {Multi-tenancy in Cloud Computing},
  year = {2014},
  volume = {},
  number = {},
  pages = {344-351},
  keywords = {Security;Cloud computing;Resource management;Computational
              modeling;Virtualization;Databases;Servers;Cloud
              Computing;Security;Multi-Tenancy;Attack Models;Cloud Data},
  doi = {10.1109/SOSE.2014.50},
}


@article{1430629,
  author = {Smith, J.E. and Ravi Nair},
  journal = {Computer},
  title = {The architecture of virtual machines},
  year = {2005},
  volume = {38},
  number = {5},
  pages = {32-38},
  keywords = {Virtual machining;Computer architecture;Voice mail;Virtual
              manufacturing;Computer interfaces;Hardware;Application
              software;Instruction sets;Operating
              systems;Microprocessors;virtualization technology;virtual
              machines;disk storage;computer architectures;VM taxonomy;software
              systems},
  doi = {10.1109/MC.2005.173},
}

@misc{k3s-website,
  author = {{Rancher}},
  title = {K3s Documentations},
  year = {2025},
  url = {https://k3s.io/},
  note = "[Online; diakses pada 9 Juni 2025]",
}

@misc{ibm-website,
  author = {{IBM}},
  title = {time-sharing},
  url = {https://www.ibm.com/history/time-sharing},
}

@misc{qemu-website,
  author = {{The QEMU Project Developer}},
  title = {QEMU Documentations},
  year = {2025},
  url = {https://www.qemu.org/docs/master/index.html},
  note = "[Online; diakses pada 9 Juni 2025]",
}

@misc{kvm-website,
  author = "KVM",
  title = "Main Page --- KVM{,} ",
  year = "2023",
  url = "https://linux-kvm.org/index.php?title=Main_Page&oldid=174096",
  note = "[Online; diakses pada 10 Juni 2025]",
}

@misc{grpc-website-docs-overview,
  author = {{gRPC Authors}},
  title = {Documentation},
  year = {2024},
  url = {https://grpc.io/docs/},
  note = "[Online; diakses pada 11 Juni 2025]",
}

@misc{linux-foundation-bridge-website,
  author = {{The Linux Foundation}},
  title = {Bridge Wiki},
  year = {2021},
  url = {
         https://wiki.linuxfoundation.org/networking/bridge#what_does_a_bridge_do
         },
  note = "[Online; diakses pada 9 Juni 2025]",
}
@misc{go-website,
  author = "Google",
  title = "Golang Website",
  url = "https://go.dev",
  note = "[Online; diakses pada 11 Juni 2025]",
}

@article{5388296,
  author = {Meyer, R. A. and Seawright, L. H.},
  journal = {IBM Systems Journal},
  title = {A virtual machine time-sharing system},
  year = {1970},
  volume = {9},
  number = {3},
  pages = {199-218},
  keywords = {},
  doi = {10.1147/sj.93.0199},
}

@article{Aalam_2021,
  doi = {10.1088/1742-6596/1950/1/012027},
  url = {https://dx.doi.org/10.1088/1742-6596/1950/1/012027},
  year = {2021},
  month = {aug},
  publisher = {IOP Publishing},
  volume = {1950},
  number = {1},
  pages = {012027},
  author = {Aalam, Zunaid and Kumar, Vinod and Gour, Surendra},
  title = {A review paper on hypervisor and virtual machine security},
  journal = {Journal of Physics: Conference Series},
  abstract = {A hypervisor is a computer programme or software that facilitates
              to create and run multiple virtual machines. It is also known as
              Virtual Machine Manager (VMM). Due to their popularity, it exploits
              the attack surface, because the Hypervisor code contains much
              vulnerability. Since the Hypervisor is a core element of any cloud
              computing service, it is always on the top priority of the
              attackers. There are many Software (open source) and Hardware-based
              Solutions are available in the market to monitor and control the
              hypervisor activities. This paper summarizes various types of
              attacks, vulnerabilities, security issues and challenges related to
              hypervisor and virtual machines.},
}

@inproceedings{6133210,
  author = {Doelitzscher, Frank and Held, Markus and Reich, Christoph and
            Sulistio, Anthony},
  booktitle = {2011 IEEE Third International Conference on Cloud Computing
               Technology and Science},
  title = {ViteraaS: Virtual Cluster as a Service},
  year = {2011},
  volume = {},
  number = {},
  pages = {652-657},
  keywords = {Benchmark testing;Cloud computing;Monitoring;Quality of
              service;Kernel;Servers;Computational modeling;cloud
              computing;virtualization;virtual cluster;HPC},
  doi = {10.1109/CloudCom.2011.101},
}

@misc{rpc-rfc,
  series = {Request for Comments},
  number = 5531,
  howpublished = {RFC 5531},
  publisher = {RFC Editor},
  doi = {10.17487/RFC5531},
  url = {https://www.rfc-editor.org/info/rfc5531},
  author = {Robert Thurlow},
  title = {{RPC: Remote Procedure Call Protocol Specification Version 2}},
  pagetotal = 63,
  year = 2009,
  month = may,
  abstract = {This document describes the Open Network Computing (ONC) Remote
              Procedure Call (RPC) version 2 protocol as it is currently deployed
              and accepted. This document obsoletes RFC 1831. {[}STANDARDS-TRACK{
              ]}},
}

@inproceedings{nfv,
  author = {Alnaim, Abdulrahman and Alwakeel, Ahmed and Fernández, Eduardo},
  year = {2019},
  month = {04},
  pages = {1-6},
  title = {A Pattern for an NFV Virtual Machine Environment},
  doi = {10.1109/SYSCON.2019.8836847},
}

@article{network-bridge,
  title = {Local area network bridges},
  journal = {Computer Communications},
  volume = {11},
  number = {3},
  pages = {115-117},
  year = {1988},
  issn = {0140-3664},
  doi = {https://doi.org/10.1016/0140-3664(88)90057-6},
  url = {https://www.sciencedirect.com/science/article/pii/0140366488900576},
  author = {E. Ball and N. Linge and P. Kummer and R. Tasker},
  keywords = {local area network bridge, remote and local networks, source
              routing bridge},
  abstract = {In this paper the authors describe local area network bridges and
              how they may be used to link networks. The functionality and the
              relative advantages and disadvantages of LAN bridges, compared to
              other network interconnection methods, are discussed. An
              alternative source routing bridge for token ring networks is also
              outlined.},
}

@mastersthesis{Singh861571,
  author = {Singh, Jaswinder},
  institution = {Blekinge Institute of Technology},
  pages = {30},
  title = {Performance evaluation of Linux Bridge and OVS in Xen},
  keywords = {Bitrate, Linux Bridge, Open vSwitch, Xen, Virtualization},
  abstract = {Virtualization is the key technology which has provided smarter
              and easier ways for effectively utilizing resources provided by the
              hypervisor. Virtualization allows multiple operative systems (OS)
              to run on a single hardware. The resources from a hardware are
              allocated to virtual machines (VM) by hypervisor. It is important
              to know how the performance of virtual switches used in hypervisor
              for network communication affect the network traffic. Performance
              of Linux Bridge (LB) and Open vSwitch (OVS) is investigated in this
              study. The method that has been used in this research is
              experimentation. Two different scenarios are used to benchmark the
              performance of LB and OVS in virtual and non-virtual environment.
              Performance metrics bitrate is used to benchmark the performance LB
              and OVS. The results received from the experimental runs contains
              the ingress bitrate and egress bitrate of LB and OVS in virtual and
              non-virtual environment. The results also contain the ingress and
              egress bitrate values from scenarios with different memory and CPU
              cores in virtual environment. Results achieved in this thesis
              report are from multiple experiment configurations. From results it
              can concluded that LB and OVS have almost same performance in
              non-virtual environment. There are small differences in ingress and
              egress of both virtual switches. },
  year = {2015},
}

@article{implementing-rpc,
  author = {Birrell, Andrew D. and Nelson, Bruce Jay},
  title = {Implementing remote procedure calls},
  year = {1984},
  issue_date = {February 1984},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {2},
  number = {1},
  issn = {0734-2071},
  url = {https://doi.org/10.1145/2080.357392},
  doi = {10.1145/2080.357392},
  journal = {ACM Trans. Comput. Syst.},
  month = feb,
  pages = {39–59},
  numpages = {21},
  keywords = {transport layer protocols, remote procedural calls, performance of
              communication protocols, inter-process communication, distributed
              naming and binding},
}

  @phdthesis{rpc,
  author = {Nelson, Bruce Jay},
  title = {Remote procedure call},
  year = {1981},
  publisher = {Carnegie Mellon University},
  address = {USA},
  abstract = {Remote procedure call is the synchronous language-level transfer
              of control between programs in disjoint address spaces whose
              primary communication medium is a narrow channel. The thesis of
              this dissertation is that remote procedure call (RPC) is a
              satisfactory and efficient programming language primitive for
              constructing distributed systems. A survey of existing remote
              procedure mechanisms shows that past RPC efforts are weak in
              addressing the five crucial issues: uniform call semantics, binding
              and configuration, strong typechecking, parameter functionality,
              and concurrency and exception control. The body of the dissertation
              elaborates these issues and defines a set of corresponding
              essential properties for RPC mechanisms. These properties must be
              satisfied by any RPC mechanism that is fully and uniformly
              integrated into a programming language for a homogeneous
              distributed system. Uniform integration is necessary to meet the
              dissertation's fundamental goal of syntactic and semantic
              transparency for local and remote procedures. Transparency is
              important so that programmers need not concern themselves with the
              physical distribution of their programs.In addition to these
              essential language properties, a number of pleasant properties are
              introduced that ease the work of distributed programming. These
              pleasant properties are good performance, sound remote interface
              design, atomic transactions, respect for autonomy, type translation
              , and remote debugging.With the essential and pleasant properties
              broadly explored, the detailed design of an RPC mechanism that
              satisfies all of the essential properties and the performance
              property is presented. Two design approaches are used: The first
              assumes full programming language support and involves changes to
              the language's compiler and binder. The second involves no language
              changes, but uses a separate translator--a source-to-source RPC
              compiler--to implement the same functionality.Design decisions
              crucial to the efficiency of the mechanism are made using a set of
              RPC performance lessons. These lessons are based on the empirical
              performance evaluation of a sequence of five working RPC mechanisms
              , each one faster than its predecessor. Some expected results about
              the costs of parameter copying, process switching, and runtime type
              manipulation are confirmed; a surprising result about the price of
              protocol layering is presented as well. These performance lessons,
              applied in concert, reduce the roundtrip time for a remote
              procedure call by a remarkable factor of 35. For moderate speed
              personal computers communicating over an Ethernet, for example, a
              simple remote call takes 800 microseconds; on a higher speed
              personal computer, the same remote call takes 149 microseconds. In
              both cases the remote call takes about 20 times longer than the
              same local call. This represents a substantial performance
              improvement over other operational RPC mechanisms.},
  note = {AAI8204168},
}
